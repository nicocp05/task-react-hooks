{"version":3,"sources":["components/TaskRow.js","components/TaskBanner.js","components/TaskCreator.js","components/VisibilityControl.js","App.js","reportWebVitals.js","index.js"],"names":["TaskRow","props","task","name","type","checked","done","onChange","toggleTask","id","TaskBanner","className","taskItems","filter","length","TaskCreator","useState","newTaskName","setNewTaskName","value","e","target","onClick","callback","VisibilityControl","isChecked","htmlFor","description","App","setTaskItems","taskCompleted","setTaskCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","t","taskTableRow","doneValue","taskName","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09189b1b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function TaskRow(props) {\r\n    return (\r\n        <tr key={props.task.id}>\r\n            <td>{props.task.name}</td>\r\n            <td>\r\n                <input type=\"checkbox\" checked={props.task.done} onChange={() => props.toggleTask(props.task)} />\r\n            </td>\r\n        </tr>\r\n    )  \r\n}\r\n","import React from 'react'\r\n\r\nexport default function TaskBanner(props) {\r\n    return (\r\n        <h4 className=\"bg-primary text-white text-center p-4\">\r\n            TaskApp ({props.taskItems.filter(task => !task.done).length} tasks to do)\r\n        </h4>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TaskCreator(props) {\r\n\r\n    const [newTaskName, setNewTaskName] = useState('');\r\n\r\n    const updateNewTaskValue = e => setNewTaskName(e.target.value);\r\n\r\n    const createNewTask = () => {\r\n        props.callback(newTaskName);\r\n        setNewTaskName('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"my-1\">\r\n            <input type=\"text\" className=\"form-control\" value={newTaskName} onChange={updateNewTaskValue} />\r\n            <button className=\"btn btn-primary mt-1\" onClick={createNewTask}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function VisibilityControl(props) {\r\n    return (\r\n        <div className=\"form-check\">\r\n            <input type=\"checkbox\" className=\"form-check-input\" checked={props.isChecked} onChange={e => props.callback(e.target.checked)} />\r\n            <label htmlFor=\"form-check-label\">\r\n                Show {props.description}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\nimport TaskRow from './components/TaskRow';\nimport TaskBanner from './components/TaskBanner';\nimport TaskCreator from './components/TaskCreator';\nimport VisibilityControl from './components/VisibilityControl';\n\nfunction App() {\n\n  const [taskItems, setTaskItems] = useState([]);\n\n  const [taskCompleted, setTaskCompleted] = useState(true);\n\n  useEffect(() => {\n    let data = localStorage.getItem('tasks');\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setTaskItems([\n        { id: 1, name: 'Task One', done: false },\n        { id: 2, name: 'Task Two', done: false },\n        { id: 3, name: 'Task Three', done: true }\n      ])\n      setTaskCompleted(true);\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems));\n  }, [taskItems])\n\n  const createNewTask = (taskName) => {\n    if (!taskItems.find(t => t.id === taskName.id)) {\n      setTaskItems([...taskItems, {id: (taskItems.length) + 1, name: taskName, done: false}])\n    }\n  }\n\n  const toggleTask = (task) => {\n    setTaskItems(taskItems.map(t => (t.id) === task.id ? {...t, done: !t.done } : t))\n  }\n\n  const taskTableRow = (doneValue) => (\n    taskItems\n      .filter(task => task.done === doneValue)\n      .map(task => (\n        <TaskRow task={task} key={task.id} toggleTask={toggleTask} />\n  )))\n\n  return (\n    <div>\n      <TaskBanner taskItems={taskItems}/>\n      <TaskCreator callback={createNewTask} />\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Done</th>\n          </tr>\n        </thead>\n        <tbody>\n          {taskTableRow(false)}\n        </tbody>\n      </table>\n      <div className=\"bg-secondary-text-white text-center p-2\">\n        <VisibilityControl description=\"Completed task\" isChecked={taskCompleted} callback={checked => setTaskCompleted(checked)} />\n      </div>\n      {\n        taskCompleted && (\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>\n              {taskTableRow(true)}\n            </tbody>\n          </table>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}